<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ApplicationContext额外的功能</title>
      <link href="/2020/08/19/applicationcontext-e-wai-de-gong-neng/"/>
      <url>/2020/08/19/applicationcontext-e-wai-de-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="ApplicationContext额外的功能"><a href="#ApplicationContext额外的功能" class="headerlink" title="ApplicationContext额外的功能"></a><code>ApplicationContext</code>额外的功能</h2><p><code>org.springframework.beans.factory</code> 包提供了管理和使用bean的基本功能， <code>org.springframework.context</code> 包下添加了继承<code>BeanFactory</code>的<a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener"><code>ApplicationContext</code></a>接口，其提供了额外的应用级功能</p><p><code>ApplicationContext</code>提供了如下功能：</p><ul><li>通过<code>MessageSource</code>接口进行国际化</li><li>通过<code>ResourceLoader</code>接口获取URLs或者文件等资源</li><li>事件发布，通过<code>ApplicationEventPublisher</code>通知实现<code>ApplicationListener</code>接口的bean</li><li>加载多个上下文环境（继承关系），通过<code>HierarchicalBeanFactory</code>使得每一个context能专注于其功能项，比如web应用的前端控制器层。</li></ul><h3 id="使用-MessageSource进行国际化"><a href="#使用-MessageSource进行国际化" class="headerlink" title="使用 MessageSource进行国际化"></a>使用 <code>MessageSource</code>进行国际化</h3><p><code>ApplicationContext</code>接口继承了<code>MessageSource</code>接口，因此<code>ApplicationContext</code>能够提供国际化的功能，Spring也提供<code>HierarchicalMessageSource</code>来支持分层处理国际化，接口定义的方法包括：</p><ul><li><code>String getMessage(String code, Object[] args, String default, Locale loc)</code>: 从 <code>MessageSource</code>中获取国际化消息的基本方法。如果没有找到相应的国际化消息结果，则使用默认的值。使用 <code>MessageFormat</code>进行参数位置替换。</li><li><code>String getMessage(String code, Object[] args, Locale loc)</code>: 本质上和以上方法一样，唯一不同是不提供默认值，如果未找到则抛出 <code>NoSuchMessageException</code></li><li><code>String getMessage(MessageSourceResolvable resolvable, Locale locale)</code>: 上述方法使用到的参数被封装到 <code>MessageSourceResolvable</code></li></ul><p>当<code>ApplicationContext</code>被加载时，会自动查询容器中的<code>MessageSource</code>bean，并且这个bean的名字必须为<code>messageSource</code>，如果找到<code>MessageSource</code>bean，所有相关的方法都会被代理到这个bean实现，如果未找到，<code>ApplicationContext</code>会查询其父容器中的<code>messageSource</code>bean，如果未找到任何<code>messageSource</code>bean，将会实例化<code>DelegatingMessageSource</code>进行使用。</p><p>spring提供了2个<code>MessageSource</code>实现类： <code>ResourceBundleMessageSource</code> 和 <code>StaticMessageSource</code>。并且都实现了<code>HierarchicalMessageSource</code>接口来实现消息合并国际化处理，<code>StaticMessageSource</code>使用的比较少，<code>ResourceBundleMessageSource</code>案例：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageSource<span class="token punctuation">"</span></span>            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ResourceBundleMessageSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basenames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>format<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>exceptions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>windows<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上表示类路径下有3个资源集合： <code>format</code>, <code>exceptions</code>， <code>windows</code> ，任何请求都将通过<code>ResourceBundle</code> – JDK的标准方式进行国际化处理。</p><p>国际化文件编写案例:</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">    # in format.properties</span><span class="token attr-name">    message</span><span class="token punctuation">=</span><span class="token attr-value">Alligators rock!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">  # in exceptions.properties</span><span class="token attr-name">    argument.required</span><span class="token punctuation">=</span><span class="token attr-value">The {0} argument is required.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过代码使用<code>MessageSource</code>接口，记住：<code>ApplicationContext</code>实现了<code>MessageSource</code>接口，可以被强转为<code>MessageSource</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MessageSource resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">"Default"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>Alligators rock!</code></pre><p>解析：上述<code>MessageSource</code>定义在beans.xml中，<code>messageSource</code>bean通过<code>basenames</code>指定国际化资源文件。上述指定了3个文件： <code>format.properties</code>, <code>exceptions.properties</code>, <code>windows.properties</code></p><p><code>MessageSource</code>获取使用参数：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- this MessageSource is being used in a web application --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ResourceBundleMessageSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basename<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptions<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- lets inject the above MessageSource into this POJO --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.something.Example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messages<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>messageSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MessageSource messages<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessages</span><span class="token punctuation">(</span>MessageSource messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>messages <span class="token operator">=</span> messages<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"argument.required"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"userDao"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Required"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre><code>The userDao argument is required.</code></pre><p>如果想要进行英国的国际化(<code>en-GB</code>），需要创建 <code>format_en_GB.properties</code>, <code>exceptions_en_GB.properties</code>, <code>windows_en_GB.properties</code>。比如：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># in exceptions_en_GB.properties</span><span class="token attr-name">argument.required</span><span class="token punctuation">=</span><span class="token attr-value">Ebagum lad, the ''{0}'' argument is required, I say, required.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MessageSource resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"argument.required"</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"userDao"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Required"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>UK<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre><code>Ebagum lad, the &#39;userDao&#39; argument is required, I say, required.</code></pre><p>也可以使用 <code>MessageSourceAware</code> 接口来获取<code>MessageSource</code>对象，<code>ApplicationContext</code>中任何实现<code>MessageSourceAware</code>接口的对象在创建和被配置的时候都将被注入<code>MessageSource</code>对象。</p><p>tips：<code>ResourceBundleMessageSource</code>的一个可选实现是<code>ReloadableResourceBundleMessageSource</code>，<code>ReloadableResourceBundleMessageSource</code>比基于JDK的<code>ResourceBundleMessageSource</code>更加灵活，尤其是支持从任何spring资源加载位置读取（不仅仅是类路径）以及支持热加载， 详情：<a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/support/ReloadableResourceBundleMessageSource.html" target="_blank" rel="noopener"><code>ReloadableResourceBundleMessageSource</code></a></p><h3 id="标准和自定义事件"><a href="#标准和自定义事件" class="headerlink" title="标准和自定义事件"></a>标准和自定义事件</h3><p><code>ApplicationContext</code>通过<code>ApplicationEvent</code>和<code>ApplicationListener</code>提供事件处理机制，如果容器中一个bean实现了<code>ApplicationListener</code>接口,每当有<code>ApplicationEvent</code>发布到<code>ApplicationContext</code>中就会通知此bean，本质上这就是观察者模式的实现。</p><p>Spring 4.2之后，事件机制得到增强，Spring提供了注解开发模式以及事件不再必须实现<code>ApplicationEvent</code>接口，当发布事件时，Spring自动将其封装为<code>ApplicationEvent</code>。</p><p>Spring提供的标准事件：</p><table><thead><tr><th align="left">Event</th><th align="left">Explanation</th></tr></thead><tbody><tr><td align="left"><code>ContextRefreshedEvent</code></td><td align="left">Published when the <code>ApplicationContext</code> is initialized or refreshed (for example, by using the <code>refresh()</code> method on the <code>ConfigurableApplicationContext</code> interface). Here, “initialized” means that all beans are loaded, post-processor beans are detected and activated, singletons are pre-instantiated, and the <code>ApplicationContext</code> object is ready for use. As long as the context has not been closed, a refresh can be triggered multiple times, provided that the chosen <code>ApplicationContext</code> actually supports such “hot” refreshes. For example, <code>XmlWebApplicationContext</code> supports hot refreshes, but <code>GenericApplicationContext</code> does not.</td></tr><tr><td align="left"><code>ContextStartedEvent</code></td><td align="left">Published when the <code>ApplicationContext</code> is started by using the <code>start()</code> method on the <code>ConfigurableApplicationContext</code> interface. Here, “started” means that all <code>Lifecycle</code> beans receive an explicit start signal. Typically, this signal is used to restart beans after an explicit stop, but it may also be used to start components that have not been configured for autostart (for example, components that have not already started on initialization).</td></tr><tr><td align="left"><code>ContextStoppedEvent</code></td><td align="left">Published when the <code>ApplicationContext</code> is stopped by using the <code>stop()</code> method on the <code>ConfigurableApplicationContext</code> interface. Here, “stopped” means that all <code>Lifecycle</code> beans receive an explicit stop signal. A stopped context may be restarted through a <code>start()</code> call.</td></tr><tr><td align="left"><code>ContextClosedEvent</code></td><td align="left">Published when the <code>ApplicationContext</code> is being closed by using the <code>close()</code> method on the <code>ConfigurableApplicationContext</code> interface or via a JVM shutdown hook. Here, “closed” means that all singleton beans will be destroyed. Once the context is closed, it reaches its end of life and cannot be refreshed or restarted.</td></tr><tr><td align="left"><code>RequestHandledEvent</code></td><td align="left">A web-specific event telling all beans that an HTTP request has been serviced. This event is published after the request is complete. This event is only applicable to web applications that use Spring’s <code>DispatcherServlet</code>.</td></tr><tr><td align="left"><code>ServletRequestHandledEvent</code></td><td align="left">A subclass of <code>RequestHandledEvent</code> that adds Servlet-specific context information.</td></tr></tbody></table><p>自定义事件案例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockedListEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BlockedListEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// accessor and other methods...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发布事件需要调用<code>ApplicationEventPublisher</code>的 <code>publishEvent()</code> 方法，通常的做法是实现<code>ApplicationEventPublisherAware</code>接口，并将其注册为spring bean：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailService</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationEventPublisherAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> blockedList<span class="token punctuation">;</span>    <span class="token keyword">private</span> ApplicationEventPublisher publisher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlockedList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> blockedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>blockedList <span class="token operator">=</span> blockedList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 重写 setApplicationEventPublisher方法获取ApplicationEventPublisher</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationEventPublisher</span><span class="token punctuation">(</span>ApplicationEventPublisher publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>publisher <span class="token operator">=</span> publisher<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span>String address<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blockedList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlockedListEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// send email...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring容器的配置期间，检测到<code>EmailService</code>实现了<code>ApplicationEventPublisherAware</code>接口，会自动调用<code>setApplicationEventPublisher()</code>方法，Spring会自动填充其参数，所以我们可以通过<code>ApplicationEventPublisher</code>与Spring容器交互。</p><p>为了能监听<code>ApplicationEvent</code>事件，需要实现<code>ApplicationListener</code>并将其注册为Spring bean：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockedListNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>BlockedListEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String notificationAddress<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNotificationAddress</span><span class="token punctuation">(</span>String notificationAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>notificationAddress <span class="token operator">=</span> notificationAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>BlockedListEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// notify appropriate parties via notificationAddress...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ApplicationListener</code>带有范型，意味着<code>onApplicationEvent()</code>方法不需要我们进行强转，我们可以注册许多监听器，但是默认情况下监听器是同步接受事件的，也就是说 <code>publishEvent()</code> 在直到所有监听器被执行完之前是一只阻塞的，好处就是能在同一线程中执行，并且如果存在事务环境，也能保持一致。如果需要使用其他策略，考虑 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/event/ApplicationEventMulticaster.html" target="_blank" rel="noopener"><code>ApplicationEventMulticaster</code></a>以及实现类 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/event/SimpleApplicationEventMulticaster.html" target="_blank" rel="noopener"><code>SimpleApplicationEventMulticaster</code></a></p><p>注册以上的bean进行使用：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.EmailService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blockedList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>known.spammer@example.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>known.hacker@example.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>john.doe@example.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blockedListNotifier<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.BlockedListNotifier<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>notificationAddress<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blockedlist@example.org<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>emailService</code>的 <code>sendEmail()</code> 被调用时，如果有黑名单中的邮件，则会发布<code>BlockedListEvent</code>，<code>blockedListNotifier</code>就会被通知</p><blockquote><p>spring的事件机制的设计是被用来处理同一个<code>ApllicationContext</code>中的Bean进行交互的，如果需要更加复杂的交互能力需要使用<a href="https://projects.spring.io/spring-integration/" target="_blank" rel="noopener">Spring Integration</a> ，能够构建轻量级、基于事件驱动的应用</p></blockquote><h4 id="基于注解的事件监听"><a href="#基于注解的事件监听" class="headerlink" title="基于注解的事件监听"></a>基于注解的事件监听</h4><p>Spring 4.2之后能够在任何Bean中的public方法上加上<code>@EventListener</code>注解完成事件监听，<code>blockedListNotifier</code>重新实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockedListNotifier</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String notificationAddress<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNotificationAddress</span><span class="token punctuation">(</span>String notificationAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>notificationAddress <span class="token operator">=</span> notificationAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBlockedListEvent</span><span class="token punctuation">(</span>BlockedListEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// notify appropriate parties via notificationAddress...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果方法需要监听多个事件，并且想使用无参方法，也可以将事件声明到注解中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ContextStartedEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ContextRefreshedEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleContextStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还能够使用注解的<code>condition</code>属性进行事件过滤，并且是使用 <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#expressions" target="_blank" rel="noopener"><code>SpEL</code> expression</a> （Spring表达式）条件配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>condition <span class="token operator">=</span> <span class="token string">"#blEvent.content == 'my-event'"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 只有当BlockedListEvent事件中的content属性为my-event时才进行调用</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBlockedListEvent</span><span class="token punctuation">(</span>BlockedListEvent blockedListEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// notify appropriate parties via notificationAddress...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>事件上下文环境可用的元数据信息：</p><table><thead><tr><th align="left">Name</th><th align="left">Location</th><th align="left">Description</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left">Event</td><td align="left">root object</td><td align="left">The actual <code>ApplicationEvent</code>.</td><td align="left"><code>#root.event</code> or <code>event</code></td></tr><tr><td align="left">Arguments array</td><td align="left">root object</td><td align="left">The arguments (as an object array) used to invoke the method.</td><td align="left"><code>#root.args</code> or <code>args</code>; <code>args[0]</code> to access the first argument, etc.</td></tr><tr><td align="left"><em>Argument name</em></td><td align="left">evaluation context</td><td align="left">The name of any of the method arguments. If, for some reason, the names are not available (for example, because there is no debug information in the compiled byte code), individual arguments are also available using the <code>#a&lt;#arg&gt;</code> syntax where <code>&lt;#arg&gt;</code> stands for the argument index (starting from 0).</td><td align="left"><code>#blEvent</code> or <code>#a0</code> (you can also use <code>#p0</code> or <code>#p&lt;#arg&gt;</code> parameter notation as an alias)</td></tr></tbody></table><p><code>#root.event</code>能获取到底层的事件，即使监听方法签名参数接收的是自定义事件。</p><p>在处理完一个事件后，如果需要继续发布事件，只需要修改方法返回值即可：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token keyword">public</span> ListUpdateEvent <span class="token function">handleBlockedListEvent</span><span class="token punctuation">(</span>BlockedListEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// notify appropriate parties via notificationAddress and</span>    <span class="token comment" spellcheck="true">// then publish a ListUpdateEvent...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但是此用法不支持异步调用监听器</p></blockquote><p>这个方法在美处理完一个<code>BlockedListEvent</code>事件后发布<code>ListUpdateEvent</code>事件，如果需要发布多个事件可以返回事件的<code>Collection</code>。</p><h4 id="异步监听器"><a href="#异步监听器" class="headerlink" title="异步监听器"></a>异步监听器</h4><p>只需在监听方法上加<a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html#scheduling-annotation-support-async" target="_blank" rel="noopener"> <code>@Async</code> </a>注解就能 完成异步监听：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBlockedListEvent</span><span class="token punctuation">(</span>BlockedListEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// BlockedListEvent is processed in a separate thread</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用异步监听器的局限性</strong>：</p><ul><li>如果异步监听器抛出异常，并不会被传递到调用者，详情参考<code>AsyncUncaughtExceptionHandler</code></li><li>异步监听器方法不支持上述发布连续的事件，如果需要进行发布连续事件，需要注入 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/aop/interceptor/AsyncUncaughtExceptionHandler.html" target="_blank" rel="noopener"><code>ApplicationEventPublisher</code></a> 进行手动发布</li></ul><h4 id="监听器的执行顺序"><a href="#监听器的执行顺序" class="headerlink" title="监听器的执行顺序"></a>监听器的执行顺序</h4><p>添加<code>@Order</code>注解进行顺序编排：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBlockedListEvent</span><span class="token punctuation">(</span>BlockedListEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// notify appropriate parties via notificationAddress...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用事件"><a href="#通用事件" class="headerlink" title="通用事件"></a>通用事件</h4><p>在某些情况下，如果所有事件都遵循相同的结构，这可能会变得很通用性（就像前面示例中的事件一样）。 在这种情况下，可以实现<code>ResolvableTypeProvider</code>来指导框架获取运行时类型：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityCreatedEvent</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token keyword">implements</span> <span class="token class-name">ResolvableTypeProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">EntityCreatedEvent</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ResolvableType <span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResolvableType<span class="token punctuation">.</span><span class="token function">forClassWithGenerics</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ResolvableType<span class="token punctuation">.</span><span class="token function">forInstance</span><span class="token punctuation">(</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>EntityCreatedEvent&lt;T&gt;</code> 构造通用的事件，其中<code>T</code>是实际的事件实体，比如：只接收<code>EntityCreatedEvent</code>事件的监听器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EventListener</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPersonCreated</span><span class="token punctuation">(</span>EntityCreatedEvent<span class="token operator">&lt;</span>Person<span class="token operator">></span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这不光对<code>ApplicationEvent</code>有效，而且可以是任意事件对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ioc 容器</title>
      <link href="/2020/08/19/ioc-rong-qi/"/>
      <url>/2020/08/19/ioc-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍IoC容器"><a href="#介绍IoC容器" class="headerlink" title="介绍IoC容器"></a>介绍IoC容器</h2><p>​ IoC容器也被称为依赖注入（DI，dependency injection）。这就是一个过程，在这个过程中，对象通过构造器参数、工厂方法参数或者是工厂方法返回后的对象上的属性来定义依赖项。IoC容器会在创建这些bean的时候注入这些依赖，这个过程完全是交由容器处理（正如其名：控制反转）。</p><p>​ <code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 包下的类是IoC 容器的基础。 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/beans/factory/BeanFactory.html" target="_blank" rel="noopener"><code>BeanFactory</code></a> 提供了管理任何类型对象的高级配置机制。 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html" target="_blank" rel="noopener"><code>ApplicationContext</code></a> 是 <code>BeanFactory</code>的子接口，它添加了以下功能：</p><ul><li>集成Spring AOP特性</li><li>国际化（i18n）</li><li>事件发布（ApllicationEvent）</li><li>应用级容器，例如： <code>WebApplicationContext</code> 构建web应用</li></ul><p>总而言之，<code>BeanFactory</code>提供了配置框架和基本功能，<code>ApllicationContext</code>则提供了更多企业级的功能。<code>ApllicationContext</code>完全是扩展自<code>BeanFactory</code> （子集关系）。</p><p>在spring中，被springIoC容器所管理的、组成应用的对象就叫Spring Bean，一个Bean会被Spring IoC容器所实例化、收集和管理。除此之外，bean只是我们应用容器中许多对象的其中之一。Bean之间的依赖关系通过容器中的配置元数据（BeanDefinition）进行展示。</p><h2 id="容器概览"><a href="#容器概览" class="headerlink" title="容器概览"></a>容器概览</h2><p><code>org.springframework.context.ApplicationContext</code> 接口呈现了IoC容器并且负责实例化、配置、收集Bean。容器会通过读取配置元数据来进行实例化、配置和收集Bean。配置元数据可以通过XML、Java注解、Java代码来定义。通过定义可以让我们表示组成应用的对象信息以及对象之间的内部依赖关系。</p><p>Sprin提供了<code>ApllicationContext</code>的许多实现类，在标准的独立应用中，创建 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html" target="_blank" rel="noopener"><code>ClassPathXmlApplicationContext</code></a> 或者 <a href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html" target="_blank" rel="noopener"><code>FileSystemXmlApplicationContext</code></a> 是常见的选择。尽管XML是定义配置元数据的传统格式，但是我们可以通过提供少量XML配置来声明式地启用对这些其他配置元数据格式的支持，从而指示容器将Java注释或代码用作元数据格式。</p><p>在大多数应用场景下，不需要用户显式的创建一个或多个Spring IoC容器。</p><p>下图展示了spring是如何工作的，我们的应用Java类和配置元数据被整合在一起，在创建完<code>ApllicationContext</code>后，将会得到一个完全可配置并且可执行的系统或应用程序。</p><p><img src="https://docs.spring.io/spring/docs/current/spring-framework-reference/images/container-magic.png" alt="container magic"></p><h3 id="配置元数据"><a href="#配置元数据" class="headerlink" title="配置元数据"></a>配置元数据</h3><p>像上图所展示的，Spring IoC容器会使用一系列配置元数据，配置元数据能让开发者定义Spring容器如何实例化、配置、收集应用程序中的对象。</p><p>配置元数据支持以XML格式定义，但是当今许多开发者选择使用基于Java的配置方式。</p><p>使用其他形式配置：</p><ul><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-annotation-config" target="_blank" rel="noopener">基于注解配置</a>: Spring 2.5 支持基于注解配置</li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-java" target="_blank" rel="noopener">基于Java配置</a>: Spring 3.0开始,SpringJava配置项目提供的新特性被加入到Spring的核心框架中。这样就不仅可以使用XML配置还能使用新特性： <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html" target="_blank" rel="noopener"><code>@Configuration</code></a>, <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html" target="_blank" rel="noopener"><code>@Bean</code></a>, <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html" target="_blank" rel="noopener"><code>@Import</code></a>, <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html" target="_blank" rel="noopener"><code>@DependsOn</code></a> 注解</li></ul><p>Spring配置必须又至少管理了一个Bean定义的容器组成。XML通常使用<bean>标签定义，而Java配置则通常使用<code>@Bean</code>注解被<code>@configuration</code>类的方法上来定义</bean></p><p>这些bean定义对应的真实对象组成了应用程序，通常来说，我们定义的服务层、DAO、表述层对象，应用基础对象。通常，不会在容器中配置细粒度的域对象，因为DAO和业务逻辑通常负责创建和加载域对象。如果要配置IoC容器之外的对象可以使用<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-atconfigurable" target="_blank" rel="noopener">Spring Aspectj整合</a></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- more bean definitions go here --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>id</code>是Bean定义的唯一标识</li><li><code>class</code>定义了bean的类型，使用全类名</li></ol><h3 id="实例化一个IoC容器"><a href="#实例化一个IoC容器" class="headerlink" title="实例化一个IoC容器"></a>实例化一个IoC容器</h3><p><code>ApplicationContext</code>可以从多种外部资源进行加载，比如：本地文件系统，Java类路径等等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"services.xml"</span><span class="token punctuation">,</span> <span class="token string">"daos.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="组合XML配置"><a href="#组合XML配置" class="headerlink" title="组合XML配置"></a>组合XML配置</h3><p>分多个XML文件配置Bean definition是十分有用的，每个XML都可以独立呈现应用程序的逻辑或者模块</p><p>可以使用application context的接受多个<code>Resource</code>参数的方法来加载多个XML定义，也可以使用<import>标签来加载其他XML文件：</import></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>services.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resources/messageSource.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/resources/themeSource.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上配置加载了三个文件：<code>services.xml</code>, <code>messageSource.xml</code>, <code>themeSource.xml</code>。<code>services.xml</code>地址都是相对路径，所以<code>services.xml</code>文件必须在同一个目录下活类路径下，而 <code>messageSource.xml</code> 和 <code>themeSource.xml</code> 必须在<code>resources</code>目录下。能发下的是：地址开头的“/”已经被忽略了，所以鉴于这些路径是相对路径，最好不要使用斜线开头。</p><p>TIPS：虽然能使用“../”来获取上级目录但是并不是被推荐的方式，这样做会依赖应用外部的文件，更不建议在类路径中使用：比如<code>classpath:../services.xml</code>,如果类路径配置改变将会导致不同的，不正确的目录。也可以使用绝对路径而不是相对路径<code>file:C:/config/services.xml</code>或者 <code>classpath:/config/services.xml</code>但是要注意到应用程序已经耦合了文件系统绝对路径，通常使用绝对路径更好的做法是使用占位符，通过在运行时针对JVM系统属性解析的“ $ {…}”占位符。</p><h2 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h2><p><code>ApplicationContext</code> 是一个管理不同bean注册以及它们的依赖的高级工厂接口类，通过使用<code>T getBean(String name, Class&lt;T&gt; requiredType)</code>可以得到想要的实例。</p><p><code>ApplicationContext</code>能够让开发者读取bean定义的信息，并访问它们：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// create and configure beans</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"services.xml"</span><span class="token punctuation">,</span> <span class="token string">"daos.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// retrieve configured instance</span>PetStoreService service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"petStore"</span><span class="token punctuation">,</span> PetStoreService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// use configured instance</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> userList <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getUsernameList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用<code>getBean</code>来获取bean，<code>ApplicationContext</code>还有许多获取bean的方法，但是我们的业务代码最好不要使用它们，这样就不会依赖spring的api。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring bean</title>
      <link href="/2020/08/19/spring-bean/"/>
      <url>/2020/08/19/spring-bean/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h2><p>Spring容器管理了一个或者多个bean，这些bean是更具bean定义元数据进行创建的。</p><p>在Spring容器内部，bean定义元数据以<code>BeanDefinition</code>对象呈现，包含以下信息：</p><ul><li>类的全类名</li><li>定义bean在容器中的行为的配置元素，比如：bean作用域、生命周期回掉方法等</li><li>被当前bean所引用的bean</li><li>其他配置-比如：连接池的大小</li></ul><p>这些元数据会翻译为一系列属性组成<code>BeanDefinition</code>：</p><table><thead><tr><th align="left">属性</th><th align="left">官方说明链接</th></tr></thead><tbody><tr><td align="left">Class</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-class" target="_blank" rel="noopener">Instantiating Beans</a></td></tr><tr><td align="left">Name</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-beanname" target="_blank" rel="noopener">Naming Beans</a></td></tr><tr><td align="left">Scope</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-scopes" target="_blank" rel="noopener">Bean Scopes</a></td></tr><tr><td align="left">Constructor arguments</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Dependency Injection</a></td></tr><tr><td align="left">Properties</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-collaborators" target="_blank" rel="noopener">Dependency Injection</a></td></tr><tr><td align="left">Autowiring mode</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-autowire" target="_blank" rel="noopener">Autowiring Collaborators</a></td></tr><tr><td align="left">Lazy initialization mode</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lazy-init" target="_blank" rel="noopener">Lazy-initialized Beans</a></td></tr><tr><td align="left">Initialization method</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-initializingbean" target="_blank" rel="noopener">Initialization Callbacks</a></td></tr><tr><td align="left">Destruction method</td><td align="left"><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans-factory-lifecycle-disposablebean" target="_blank" rel="noopener">Destruction Callbacks</a></td></tr></tbody></table><p><code>BeanDefinition</code>包含了如何准确创建一个bean的信息，<code>ApplicationContext</code>也允许用户注册在容器外部创建的对象。可以通过<code>getBeanFactory()</code>来获取ApplicationContext内部聚合的BeanFactory来做到，其返回BeanFactory实现类为<code>DefaultListableBeanFactory</code>，<code>DefaultListableBeanFactory</code>支持通过<code>registerSingleton(..)</code>和<code>registerBeanDefinition(..)</code>方法进行注册</p><p>TIPS： 为了能让Spring容器在自动装盘时正确的理解bean的意图，Bean元数据和手动注册的单实例对象应该被尽可能早地执行。虽然在某种程度上支持覆盖现有Bean元数据和现有单例实例，但是在运行时（与对工厂的实时访问同时）对新bean的注册不被Spring支持，并且可能导致并发访问异常，bean容器中的状态不一致。</p><h3 id="bean的命名"><a href="#bean的命名" class="headerlink" title="bean的命名"></a>bean的命名</h3><p>任何一个bean都有一个或多个标识符，这些标识符在持有这些bean的容器中必须唯一，通常一个bean只有一个标识符，如果要求有多个，可以考虑起别名。</p><p>使用XML进行配置时，我们使用<code>id</code>和<code>name</code>属性进行指定bean的标识符，<code>id</code>能指定唯一的标识，这些都是由字母数字组成的(‘myBean’, ‘someService’等)，也能包含特殊的字符，如果需要起一些别名，则使用<code>name</code>属性进行定义，使用逗号，分号或空格进行分隔。但<code>id</code>必须唯一。</p><p>如果没有指定<code>id</code>和<code>name</code>，容器会为bean自动生成一个唯一的标识符。</p><p><strong>bean命名惯例</strong>：bean的名称默认使用首单词的首字母小写，其余的单词首字母都是大写，比如：accountManager<code>,</code>accountService<code>,</code>userDao<code>,</code>loginController等。</p><p>bean的命名能够使得应用的配置更加简单和易读，如果使用Spring Aop，能够更方便的通过bean的名称进行的切面定义。</p><p><code>TIPS</code>:通过在类路径中进行组件扫描，Spring会按照前面描述的规则为未命名的组件生成Bean名称：从本质上讲，将采用简单的类名称并将其首字符转换为小写。 但是，在（不寻常的）特殊情况下，如果有多个字符且第一个和第二个字符均为大写字母，则会保留原始大小写。</p><h3 id="在BeanDefinition之外给bean取别名"><a href="#在BeanDefinition之外给bean取别名" class="headerlink" title="在BeanDefinition之外给bean取别名"></a>在BeanDefinition之外给bean取别名</h3><p>我们可以通过BeanDefinition给bean定义一个或多个名称，通过<code>id</code>属性定义唯一标识符和<code>name</code>属性定义多个别名。</p><p>但是，在实际定义bean的地方指定所有别名并不能满足需求。 有时需要为在别处定义的bean引入别名。 在大型系统中通常是这种情况，在大型系统中，配置在每个子系统之间分配，每个子系统都有自己的对象定义集。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fromName<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用XML的<alias>标签进行起别名给<code>fromName</code>的bean起一个<code>toName</code>的别名。</alias></p><p>比如：A系统通过<code>subsystemA-dataSource</code>来引用一个Datasource对象，B系统通过<code>subsystemB-dataSource</code>来引用DataSource对象，当组合这2个子系统为一个系统时，主应用使用<code>myApp-dataSource</code>来进行引用，这种情况可以使用以下配置：</p><pre><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemA-dataSource&quot;/&gt;&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemB-dataSource&quot;/&gt;</code></pre><h2 id="实例化bean"><a href="#实例化bean" class="headerlink" title="实例化bean"></a>实例化bean</h2><p>一个beanDefinition可以创建一个或多个对象，容器在被查询时会查看命名bean的定义，并使用该bean定义封装的配置元数据来创建（或获取）实际对象。</p><p>如果使用XML定义Bean元数据，通常需要指定<bean>标签中的<code>class</code>属性<code>class</code>属性对应<code>BeanDefinition</code>中的<code>Class</code>字段。<code>Class</code>字段有2种用法:</bean></p><ul><li>通常，在容器本身通过反射机制调用其构造函数直接创建Bean的情况下，指定要构造的Bean类型，这在某种程度上等同于使用<code>new</code>运算符的Java代码。</li><li>要指定包含用于创建对象的静态工厂方法的实际类，在不太常见的情况下，容器将在类上调用静态工厂方法以创建Bean。 从静态工厂方法的调用返回的对象类型可以是同一类，也可以是完全不同的另一类。</li></ul><p><code>内部类</code>：如果需要配置类的内部静态类的bean定义，必须要使用类的组合名称，比如：在 <code>com.example</code> 包下有一个叫<code>SomeThing</code>的类，在其内部有一个叫<code>OtherThing</code>的内部静态类，则其beanDefinition的<code>class</code>属性将会是<code>com.example.SomeThing$OtherThing</code>,<code>$</code>被用来作为内部类和外部类的分隔。</p><h3 id="使用构造器初始化"><a href="#使用构造器初始化" class="headerlink" title="使用构造器初始化"></a>使用构造器初始化</h3><p>当通过构造方法创建一个bean时，所有普通类都可以被Spring使用并兼容。 也就是说，正在开发的类不需要实现任何特定的接口或以特定的方式进行编码。 只需指定bean类就足够了。 但是，根据用于该特定bean的IoC类型，可能需要一个默认（空）构造函数。</p><p>Spring IoC容器几乎可以管理任何类。 它不仅限于管理真正的JavaBean。 大多数Spring用户更喜欢实际的JavaBean，它们仅具有默认（无参数）构造函数，并具有根据容器中的属性建模的适当的setter和getter。 还可以在容器中包含更多奇特的非bean样式类。 例如，如果需要使用绝对不符合JavaBean规范的旧式连接池，则Spring也可以对其进行管理。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anotherExample<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ExampleBeanTwo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用静态工厂方法进行实例化"><a href="#使用静态工厂方法进行实例化" class="headerlink" title="使用静态工厂方法进行实例化"></a>使用静态工厂方法进行实例化</h3><p>可以使用<code>class</code>属性来指定包含静态工厂方法的的类，使用<code>factory-method</code>属性来指定工厂方法的名字。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.ClientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ClientService clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">ClientService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ClientService <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用实例工厂方法"><a href="#使用实例工厂方法" class="headerlink" title="使用实例工厂方法"></a>使用实例工厂方法</h3><p>使用已存在的bean的非静态工厂方法创建新的bean：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- the factory bean, which contains a method called createInstance() --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.DefaultServiceLocator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- inject any dependencies required by this locator bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- the bean to be created via the factory bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createClientServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ClientService clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ClientService <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂类也能拥有多个工厂方法：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>examples.DefaultServiceLocator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- inject any dependencies required by this locator bean --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clientService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createClientServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceLocator<span class="token punctuation">"</span></span>    <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createAccountServiceInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultServiceLocator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ClientService clientService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AccountService accountService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ClientService <span class="token function">createClientServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clientService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AccountService <span class="token function">createAccountServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式说明工厂bean本省可以被容器管理和通过DI配置。</p><h3 id="决定bean的运行时类型"><a href="#决定bean的运行时类型" class="headerlink" title="决定bean的运行时类型"></a>决定bean的运行时类型</h3><p>确定特定bean的运行时类型并非易事。 Bean元数据定义中的指定类只是初始类引用，可能与声明的工厂方法结合使用，或者是<code>FactoryBean</code>类，这可能导致Bean的运行时类型不同，或者在实例的情况下根本不进行设置 工厂方法（通过指定的factory-bean名称解析）。 此外，AOP代理可以使用基于接口的代理包装Bean实例，而目标Bean的实际类型（仅是其实现的接口）的暴露程度有限。</p><p>建议使用<code>BeanFactory.getType</code>获取运行时bean的类型。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s中使用configmap灵活配置</title>
      <link href="/2019/12/07/k3s-zhong-shi-yong-configmap-ling-huo-pei-zhi/"/>
      <url>/2019/12/07/k3s-zhong-shi-yong-configmap-ling-huo-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="使用configmap前所遇到的问题"><a href="#使用configmap前所遇到的问题" class="headerlink" title="使用configmap前所遇到的问题"></a>使用configmap前所遇到的问题</h2><pre><code>在微服务横行的时代，一个系统被拆分成多个子系统，使得每个子系统各自有一套自己管理的配置，使得配置管理难度加大，springcloud的解决方案是spring config，可以通过github等集中托管各服务配置，集群化部署有比spring config更简单的解决方案：k8s configmap</code></pre><a id="more"></a><h2 id="什么是configmap"><a href="#什么是configmap" class="headerlink" title="什么是configmap"></a>什么是configmap</h2><p><strong>ConfigMap 是k8s集群中的一种资源类型，并且ConfigMap会将配置数据作为k-v键值对存储，存储的数据可以被集群中的<br>pod消费。通过configMap我们可以将springboot的配置文件集中管理在一个k8s名称空间下，这样就可以统一管理所有容器配置</strong></p><h2 id="创建configMap"><a href="#创建configMap" class="headerlink" title="创建configMap"></a>创建configMap</h2><p><em>使用kubectl命令创建:</em></p><pre><code>kubectl create configmap &lt;map-name&gt; &lt;data-source&gt; -n &lt;namespace&gt;</code></pre><p>其中<data-source>可以是存放配置文件的目录或者就是配置文件，<map-name>是创建的configMap的名字, &lt; namespace &gt;为指定<br>的名称空间名。</map-name></data-source></p><p>例子：</p><pre><code># 创建本地目录mkdir -p /config# 下载事例配置wget https://kubernetes.io/examples/configmap/game.properties -O configure-pod-container/configmap/game.propertieswget https://kubernetes.io/examples/configmap/ui.properties -O configure-pod-container/configmap/ui.propertieskubectl create configmap testConfigMap --from-file=/config/ -n dev</code></pre><p>上述命令为使用/config 目录下的所有配置文件在dev名称空间创建名为 testConfigMap的configMap资源</p><p><em>查看创建完的configmap:</em></p><pre><code>kubectl describe configmap testConfigMap -n devkubectl get  configmap testConfigMap -o yaml -n dev</code></pre><p>查看dev名称空间下名叫testConfigMap的configMap，如果按照上述操作，结果应该如下：</p><pre><code>Name:           game-configNamespace:      devLabels:         &lt;none&gt;Annotations:    &lt;none&gt;Data====game.properties:        158 bytesui.properties:          83 bytes</code></pre><p>使用第二条命令则更详细：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token datetime number">2016-02-18T18:52:05Z</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> game<span class="token punctuation">-</span>config  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"516"</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> b4952dc3<span class="token punctuation">-</span>d670<span class="token punctuation">-</span>11e5<span class="token punctuation">-</span>8cd0<span class="token punctuation">-</span>68f728db1985<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">game.properties</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    enemies=aliens    lives=3    enemies.cheat=true    enemies.cheat.level=noGoodRotten    secret.code.passphrase=UUDDLRLRBABAS    secret.code.allowed=true    secret.code.lives=30</span>  <span class="token key atrule">ui.properties</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    color.good=purple    color.bad=yellow    allow.textmode=true    how.nice.to.look=fairlyNice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>通过上述操作可以发现，使用命令创建后，configmap中的key即为配置文件的名字，所以使用起来也非常方便</code></pre><p><strong>创建configMap还可以通过yaml配置文件的方式创建，不再详细说明，通过文件方式更为通用</strong></p><h3 id="configMap的应用"><a href="#configMap的应用" class="headerlink" title="configMap的应用"></a>configMap的应用</h3><p><strong>创建好configMap就要使用到实际应用中，pod可以直接使用集群中的configMap资源，通常来说有2种应用：</strong></p><pre><code>1、作为pod中的环境变量导入2、作为pod中的loume挂载，将configMap的key对应的数据变成文件挂载到pod中的指定位置</code></pre><p>要集中管理springboot配置文件，使用第2种营业员方式：</p><pre><code>创建configMap，其中有2个配置文件apiVersion: v1kind: ConfigMapmetadata:  name: special-config  namespace: defaultdata:  SPECIAL_LEVEL: very  SPECIAL_TYPE: charm---将配置文件挂载到pod的/etc/config 目录下apiVersion: v1kind: Podmetadata:  name: dapi-test-podspec:  containers:    - name: test-container      image: k8s.gcr.io/busybox      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;ls /etc/config/&quot; ]      volumeMounts:      - name: config-volume        mountPath: /etc/config  volumes:    - name: config-volume      configMap:        # Provide the name of the ConfigMap containing the files you want        # to add to the container        name: special-config  restartPolicy: Never</code></pre><p>当pod创建并启动后，会输出如下结果：</p><pre><code>SPECIAL_LEVELSPECIAL_TYPE</code></pre><p>说明configMap中的key作为了文件名，值作为文件内容。</p><pre><code>注意：这种挂载方式会清空 pod中/etc/config目录下原有的所有文件，再将配置文件挂载进去，如果不想原来的配置被删除可以使用subPath的挂载方式，修改如下：</code></pre><pre><code>apiVersion: v1kind: Podmetadata:  name: dapi-test-podspec:  containers:    - name: test-container      image: k8s.gcr.io/busybox      command: [ &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;ls /etc/config/&quot; ]      volumeMounts:      - name: config-volume        mountPath: /etc/config/SPECIAL_LEVEL        subPath: SPECIAL_LEVEL volumes:    - name: config-volume      configMap:        name: special-config        items:        - key: SPECIAL_LEVEL          path: SPECIAL_LEVEL  restartPolicy: Never</code></pre><p><strong>通过subPath的挂载方式，原来pod目录里的文件就不会被删除</strong></p>]]></content>
      
      
      <categories>
          
          <category> k3s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> configmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k3s配置ingress使用ssl证书</title>
      <link href="/2019/11/03/k3s-pei-zhi-ingress-shi-yong-ssl-zheng-shu/"/>
      <url>/2019/11/03/k3s-pei-zhi-ingress-shi-yong-ssl-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Ingress"><a href="#What-is-Ingress" class="headerlink" title="What is Ingress?"></a>What is Ingress?</h2><blockquote><p>Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.</p></blockquote><pre><code>    internet        |   [ Ingress ]   --|-----|--   [ Services ]Ingress暴露了从集群外部到集群内服务的HTTP和HTTPS路由。流量路由由Ingress资源上定义的规则控制。可以将Ingress配置为提供服务外部可访问的URL，负载平衡流量，并提供基于SSL / TLS的虚拟主机。入口控制器通常通过负载平衡器负责实现入口，尽管它也可以配置边缘路由器或其他前端以帮助处理流量。</code></pre><a id="more"></a><p><strong>说白了ingress的功能就是类是于反向代理，能够做到像nginx一样的反代的功能，控制流量，并有负载均衡的能力，本文主要讨论如何在k3s集群中配置https证书</strong></p><ul><li>注意：k3s集群默认使用traefik来实现反向代理，但也支持使用nginx来作为 ingress controller 来实现反向代理</li></ul><h3 id="配置http-ingress"><a href="#配置http-ingress" class="headerlink" title="配置http ingress"></a>配置http ingress</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ingress  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/ingress.class</span><span class="token punctuation">:</span> traefik    <span class="token key atrule">traefik.frontend.rule.type</span><span class="token punctuation">:</span> PathPrefixStrip<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 这里可以配置多个域名代理规则</span>    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx <span class="token comment" spellcheck="true"># 域名</span>      <span class="token key atrule">http</span><span class="token punctuation">:</span>        <span class="token key atrule">paths</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>              <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span><span class="token number">01</span>              <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx <span class="token comment" spellcheck="true"># 域名</span>      <span class="token key atrule">http</span><span class="token punctuation">:</span>       <span class="token key atrule">paths</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>             <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span><span class="token number">02</span>             <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>执行: kubectl apply -f ingress.yaml ,创建ingress。[root@hostname ~]# kubectl get ingress NAME                 HOSTS                         ADDRESS         PORTS     AGEtest-ingress         xxxxx,xxxx                    172.17.19.115    80     6h15m可以看到 端口为80，说明ingress已经为指定的service做好http代理</code></pre><h3 id="为ingress配置https"><a href="#为ingress配置https" class="headerlink" title="为ingress配置https"></a>为ingress配置https</h3><ul><li>首先配置k3s secret</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> testsecret<span class="token punctuation">-</span>tls  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">tls.crt</span><span class="token punctuation">:</span> base64 encoded cert <span class="token comment" spellcheck="true">#此处必须为base64 加密后的证书 可使用 cat xxx.pem | base64  命令得到</span>  <span class="token key atrule">tls.key</span><span class="token punctuation">:</span> base64 encoded key  <span class="token comment" spellcheck="true">#此处必须为base64 加密后的密钥 可使用 cat xxx.key | base64  命令得到</span><span class="token key atrule">type</span><span class="token punctuation">:</span> kubernetes.io/tls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>ingress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment" spellcheck="true"># ingress要和secret在同一个名称空间下</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/ingress.class</span><span class="token punctuation">:</span> traefik    <span class="token key atrule">traefik.frontend.rule.type</span><span class="token punctuation">:</span> PathPrefixStrip     <span class="token comment" spellcheck="true"># http 重定向到 https</span>    <span class="token key atrule">ingress.kubernetes.io/ssl-redirect</span><span class="token punctuation">:</span> <span class="token string">"True"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">tls</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> xxxx.xxxx  <span class="token comment" spellcheck="true"># 这里是下面要配置https的域名</span>        <span class="token punctuation">-</span> xxxx.xxxx  <span class="token comment" spellcheck="true"># 这里是下面要配置https的域名</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> testsecret<span class="token punctuation">-</span>tls  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 这里可以配置多个域名代理规则</span>    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx <span class="token comment" spellcheck="true"># 域名</span>      <span class="token key atrule">http</span><span class="token punctuation">:</span>        <span class="token key atrule">paths</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>              <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span><span class="token number">01</span>              <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx <span class="token comment" spellcheck="true"># 域名</span>      <span class="token key atrule">http</span><span class="token punctuation">:</span>       <span class="token key atrule">paths</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>             <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span><span class="token number">02</span>             <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>先后执行： kubectl apply -f secret.yaml          kubectl apply -f ingress.yaml-----------------------------------------------------查看 secret : kubectl get secret [root@hostname ~]# kubectl get secret  NAME                  TYPE                                  DATA   AGE default-token-d25kq   kubernetes.io/service-account-token   3      10h testsecret-tls        kubernetes.io/tls                     2      7h25m第二行为我们所创建的证书的secret对象------------------------------------------------------查看ingress: kubectl get ingress [root@hostname ~]# kubectl get ingress NAME                 HOSTS                         ADDRESS         PORTS     AGEtest-ingress       xxx.xxx,xxx.xxx                172.17.19.115   80, 443   7h26m可以看到 端口已经添加了443</code></pre><p><strong>如果操作无误，这时访问我们的域名已经是变成了https，并且访问http也会被重定向到https</strong></p>]]></content>
      
      
      <categories>
          
          <category> k3s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ingress </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker入门</title>
      <link href="/2019/11/01/docker-ru-men/"/>
      <url>/2019/11/01/docker-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是docker？"><a href="#什么是docker？" class="headerlink" title="什么是docker？"></a>什么是docker？</h2><pre><code>Docker is a set of platform-as-a-service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. --wiki</code></pre><pre><code>Docker是一组平台即服务产品，它们使用操作系统级虚拟化并被称为容器的软件包交付软件。 容器彼此隔离，并将它们自己的软件，库和配置文件捆绑在一起； 他们可以通过定义明确的渠道相互通信。</code></pre><a id="more"></a><h3 id="docker基本概念容器–什么是容器"><a href="#docker基本概念容器–什么是容器" class="headerlink" title="docker基本概念容器–什么是容器"></a>docker基本概念容器–什么是容器</h3><p><strong>What is a Container? A standardized unit of software</strong></p><p><font size="3">容器是标准的软件单元（可独立运行的） ，传统的软件部署方式，需要将软件打包，并在部署之前，要在操作系统上安装相关依赖<br>，这样的部署方式使得软件的耦合度太高，并且不宜维护，而通过容器，可以将软件打包到标准化单元中，以进行开发，运输和部署，极大降低软件部署的耦合度。</font></p><h3 id="Why-Docker"><a href="#Why-Docker" class="headerlink" title="Why Docker?"></a>Why Docker?</h3><ul><li><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><ul><li><p>Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。<br>其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。</p></li><li><p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。<br>传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而 Docker 只需要启动 10 个隔离的应用即可。</p></li></ul></li></ul><h3 id="docker-容器-vs-虚拟机"><a href="#docker-容器-vs-虚拟机" class="headerlink" title="docker 容器 vs  虚拟机"></a>docker 容器 vs 虚拟机</h3><img src="https://www.docker.com/sites/default/files/d8/2018-11/docker-containerized-appliction-blue-border_2.png" width="40%"> <img src="https://www.docker.com/sites/default/files/d8/2018-11/container-vm-whatcontainer_2.png" width="40%"><pre><code>容器是应用程序层的抽象，将代码和依赖项打包在一起。多个容器可以在同一台计算机上运行，​​并与其他容器共享OS内核，每个容器在用户空间中作为隔离的进程运行。容器占用的空间少于VM（容器映像的大小通常为几十MB），可以处理更多的应用程序，并且需要的VM和操作系统更少。</code></pre><pre><code>虚拟机（VM）是将一台服务器转变为多台服务器的物理硬件的抽象。虚拟机管理程序允许多个VM在单台计算机上运行。每个VM包含操作系统，应用程序，必要的二进制文件和库的完整副本-占用数十GB。 VM也可能启动缓慢。</code></pre><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Docker 包括三个基本概念</p><ul><li>镜像（Image）</li><li>容器（Container）</li><li>仓库（Repository）</li></ul><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h4><pre><code>Docker 镜像（Image）就是一个只读的模板。例如：一个镜像可以包含一个完整的 Ubuntu 操作系统环境，里面仅安装了 Apache 或用户需要的其它应用程序。镜像可以用来创建 Docker 容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</code></pre><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><pre><code>Docker 利用容器（Container）来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括 root 用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</code></pre><ul><li>注：镜像是只读的，容器在启动的时候创建一层可写层作为最上层。</li></ul><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><pre><code>仓库（Repository）是集中存放镜像文件的场所。有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括时速云 、网易云等，可以提供大陆用户更稳定快速的访问。当然，用户也可以在本地网络内创建一个私有仓库（参考本文“私有仓库”部分）。当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。</code></pre><ul><li>注：Docker 仓库的概念跟 Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker基本概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rancher、k3s安装记录</title>
      <link href="/2019/10/09/rancher-k3s-an-zhuang-ji-lu/"/>
      <url>/2019/10/09/rancher-k3s-an-zhuang-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="k3s-简介"><a href="#k3s-简介" class="headerlink" title="k3s 简介"></a>k3s 简介</h2><p>k3s 是 Rancher 推出的轻量级 k8s。k3s 本身包含了 k8s 的源码，所以本质上和 k8s 没有区别。但为了降低资源占用，k3s 和 k8s 还是有一些区别的，主要是：</p><ul><li>使用了相比 Docker 更轻量的 containerd 作为容器运行时（Docker 并不是唯一的容器选择）</li><li>去掉了 k8s 的 Legacy, alpha, non-default features</li><li>用 sqlite3 作为默认的存储，而不是 etcd</li><li>其他的一些优化，最终 k3s 只是一个 binary 文件，非常易于部署</li></ul><p>所以 k3s 适用于边缘计算，IoT 等资源紧张的场景。同时 k3s 也是非常容易部署的，官网上提供了一键部署的脚本。</p><a id="more"></a><h3 id="下载可执行k3s-安装脚本、二进制文件-和-镜像"><a href="#下载可执行k3s-安装脚本、二进制文件-和-镜像" class="headerlink" title="下载可执行k3s 安装脚本、二进制文件 和 镜像"></a>下载可执行k3s 安装脚本、二进制文件 和 镜像</h3><pre><code>mkdir k3s-installcd k3s-installcurl -sfL https://get.k3s.io &gt; install.shchmod +x ./install.shwget https://github.com/rancher/k3s/releases/download/${k3s.version}/k3swget https://github.com/rancher/k3s/releases/download/${k3s.version}/k3s-airgap-images-amd64.tar</code></pre><h3 id="安装k3s主服务器"><a href="#安装k3s主服务器" class="headerlink" title="安装k3s主服务器"></a>安装k3s主服务器</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> ./k3s /usr/local/bin/<span class="token function">chmod</span> +x /usr/local/bin/k3s<span class="token function">mkdir</span> -p /var/lib/rancher/k3s/agent/images/<span class="token function">cp</span> ./k3s-airgap-images-amd64.tar  /var/lib/rancher/k3s/agent/images/INSTALL_K3S_SKIP_START<span class="token operator">=</span>true INSTALL_K3S_EXEC<span class="token operator">=</span><span class="token string">"--docker"</span> INSTALL_K3S_BIN_DIR<span class="token operator">=</span><span class="token string">"/usr/local/bin"</span> INSTALL_K3S_SKIP_DOWNLOAD<span class="token operator">=</span>true sh install.sh<span class="token function">ln</span> -s /usr/local/bin/k3s /usr/bin/k3ssystemctl <span class="token function">enable</span> k3ssystemctl start k3s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改配置文件 /etc/systemd/system/k3s.service 将其中的ExecStart修改为使用docker</p><pre><code>ExecStart=/usr/local/bin/k3s  server --docker</code></pre><p>运行命令，查看状态</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl get nodeNAME              STATUS   ROLES    AGE    VERSION<span class="token function">hostname</span>          Ready    master   110s   v1.14.5-k3s.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装agent"><a href="#安装agent" class="headerlink" title="安装agent"></a>安装agent</h3><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">cp</span> ./k3s /usr/local/bin/ <span class="token function">chmod</span> +x /usr/local/bin/k3s <span class="token function">mkdir</span> -p /var/lib/rancher/k3s/agent/images/ <span class="token function">cp</span> ./k3s-airgap-images-amd64.tar  /var/lib/rancher/k3s/agent/images/ INSTALL_K3S_SKIP_START<span class="token operator">=</span>true INSTALL_K3S_EXEC<span class="token operator">=</span><span class="token string">"--docker"</span> INSTALL_K3S_BIN_DIR<span class="token operator">=</span><span class="token string">"/usr/local/bin"</span> INSTALL_K3S_SKIP_DOWNLOAD<span class="token operator">=</span>true K3S_TOKEN<span class="token operator">=</span>XXXXX K3S_URL<span class="token operator">=</span>https://XXXXX:6443 sh install.sh <span class="token function">ln</span> -s /usr/local/bin/k3s /usr/bin/k3s systemctl <span class="token function">enable</span> k3s-agent systemctl start k3s-agent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>token需要从主服务器的 /var/lib/rancher/k3s/server/node-token 获取</p><h3 id="安装控制台"><a href="#安装控制台" class="headerlink" title="安装控制台"></a>安装控制台</h3><p>创建目录 /data/k3s/rancher-server/var/lib/rancher</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -v /data/k3s/rancher-server/var/lib/rancher/:/var/lib/rancher/ --restart<span class="token operator">=</span>unless-stopped --name rancher-server -p 38080:80 -p 38443:443 rancher/rancher:stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> k3s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> rancher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker部署文件服务ambry</title>
      <link href="/2019/10/08/shi-yong-docker-bu-shu-wen-jian-fu-wu-ambry/"/>
      <url>/2019/10/08/shi-yong-docker-bu-shu-wen-jian-fu-wu-ambry/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式文件服务ambry"><a href="#分布式文件服务ambry" class="headerlink" title="分布式文件服务ambry"></a>分布式文件服务ambry</h2><blockquote><p>分布式文件服务ambry是国外著名社交软件公司 linkedin 的开源项目，ambry官网地址:<br><a href="https://github.com/linkedin/ambry" target="_blank" rel="noopener">https://github.com/linkedin/ambry</a>, 可以自行查看github介绍</p></blockquote><a id="more"></a><h3 id="如何使用docker容器化部署ambry"><a href="#如何使用docker容器化部署ambry" class="headerlink" title="如何使用docker容器化部署ambry"></a>如何使用docker容器化部署ambry</h3><blockquote><p>ambry官方并没有相关镜像，所以自己制作ambry镜像进行部署,下面进行介绍:</p><p>ambry分为服务段和前端，所以制作了2个镜像, 镜像dockerHub地址：<br><a href="https://hub.docker.com/r/wdnmdcyka/ambry-client" target="_blank" rel="noopener">https://hub.docker.com/r/wdnmdcyka/ambry-client</a>, <a href="https://hub.docker.com/r/wdnmdcyka/ambry-server" target="_blank" rel="noopener">https://hub.docker.com/r/wdnmdcyka/ambry-server</a></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izwz94ymqw967redc0vyeoz ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search ambry</span>NAME                           DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDamimimor/ambry                 Ambry Docker Image                              0                                       civicknowledge/ambry           Public data ETL framework                       0                                       <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>sandinh/ambry                  dockerize <span class="token keyword">for</span> linkedin <span class="token punctuation">[</span>ambry<span class="token punctuation">]</span>                0                                       <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>sivabalan/ambry                Adding docker support <span class="token keyword">for</span> ambry                 0                                       <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>sivabalan/ambryfe              Ambry FE using <span class="token keyword">in</span> memory router factory         0                                       <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>sandinh/ambry-import-xenforo   <span class="token function">import</span> xenforo avatars, attachments to ambry    0                                       maciejbak85/ambry              Distributed object store https://github.com     0                                       civicknowledge/ambry-base                                                      0                                       gnkr8/ambry                                                                    0                                       ktimothy/ambry                                                                 0                                       wdnmdcyka/ambry-server         linkedin/ambry  server  image                   0                                       wdnmdcyka/ambry-client         linkedin/ambry  fronted  image                  0                                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要下载 wdnmdcyka/ambry-server、wdnmdcyka/ambry-client</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izwz94ymqw967redc0vyeoz ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull wdnmdcyka/ambry-server:1.0</span><span class="token punctuation">[</span>root@izwz94ymqw967redc0vyeoz ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull wdnmdcyka/ambry-client:1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h3><blockquote><p>按照官网传统部署方式，需要部署ambry的服务端和ambry的前端，前端不负责存储，所有的文件都是在服务端存储，前端只是<br>负责转发请求和组织服务端存储</p></blockquote><blockquote><p>首先部署ambry-server:</p></blockquote><pre><code>   docker run -d  -v  ${your config dir}:/app/config                                  -v ${your tmp dir}:/tmp                                 -v ${your logs dir}:/app/logs                                 -p 6667:6667                                 -p 16503:16503                                 --restart always                                 --name  ambry-server                                 wdnmdcyka/ambry-server:tagname</code></pre><blockquote><p>说明：其中挂载出来的目录有ambry的配置文件目录，/tmp为服务端存储文件的目录，/app/logs为ambry生成日志存储的目录<br>暴露的端口6667为server和client通信的端口</p></blockquote><blockquote><p>部署ambry-client：</p></blockquote><pre><code>docker run -d  -v  ${your config dir}:/app/config                                    -v ${your logs dir}:/app/logs                                 -p 1174:1174                                 --restart always                                 --name  ambry-client                                 wdnmdcyka/ambry-client:tagname</code></pre><blockquote><p>说明：由于client端不负责存储，所以没有挂载/tmp目录，1174端口是ambry暴露的rest接口所使用的端口</p></blockquote><p><strong>配置文件获取地址：<a href="https://github.com/linkedin/ambry/tree/master/config" target="_blank" rel="noopener">https://github.com/linkedin/ambry/tree/master/config</a></strong></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p>如果配置无误，直接请求 <a href="http://localhost:1174/healthCheck" target="_blank" rel="noopener">http://localhost:1174/healthCheck</a> ，如果返回 GOOD 则部署成功!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 分布式文件服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot统一异常处理</title>
      <link href="/2019/09/28/springboot-tong-yi-yi-chang-chu-li/"/>
      <url>/2019/09/28/springboot-tong-yi-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h3 id="如何在springBoot优雅的处理异常？"><a href="#如何在springBoot优雅的处理异常？" class="headerlink" title="如何在springBoot优雅的处理异常？"></a>如何在springBoot优雅的处理异常？</h3><blockquote><p>异常处理在任何项目中都尤为重要，所以这使得如何统一处理异常变得非常重要，本文记录在SpringBoot<br>中解决统一异常处理最优雅的方式。</p></blockquote><a id="more"></a><h3 id="spring-3-2新增注解-ControllerAdvice"><a href="#spring-3-2新增注解-ControllerAdvice" class="headerlink" title="spring 3.2新增注解@ControllerAdvice"></a>spring 3.2新增注解@ControllerAdvice</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">assignableTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">annotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ControllerAdvice拆分开来就是Controller Advice，关于Advice，可以理解为AOP<br>面向切面编程中的环绕增强，为指定范围内的controller进行相应方法的增强代理。</p><p>结合方法型注解@ExceptionHandler，用于捕获Controller中抛出的指定类型的异常，从而<br>达到不同类型的异常区别处理的目的；</p><p>@ControllerAdvice的用法基本是将其声明在某个bean上，然后在该bean的方法上使用其他的注解来指定不同的织入逻辑。<br>不过这里@ControllerAdvice并不是使用AOP的方式来织入业务逻辑的，而是Spring内置对其各个逻辑的织入方式进行了内置支持</p></blockquote><h4 id="ExceptionHandler注解"><a href="#ExceptionHandler注解" class="headerlink" title="@ExceptionHandler注解"></a>@ExceptionHandler注解</h4><blockquote><p>@ExceptionHandler的作用主要在于声明一个或多个类型的异常,当符合条件的Controller<br>抛出这些异常之后将会对这些异常进行捕获，然后按照其标注的方法的逻辑进行处理，从而改变返回的信息</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ExceptionHandler</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 指定需要捕获的异常的Class类型</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><blockquote><p>统一异常配置类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"xxx.xxx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//指定controller所在的包</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//需要处理的异常类型</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> errorMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">500</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> errorMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写个简单的controller 直接抛出异常</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组越界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>访问 /test 并没有直接返回结果 而是上述返回异常处理的map</p></blockquote><pre><code>{  &quot;code&quot;:500,  &quot;errorMsg&quot;:&quot;数组越界&quot;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mapstruct在SpringBoot中的使用</title>
      <link href="/2019/09/26/mapstruct-zai-springboot-zhong-de-shi-yong/"/>
      <url>/2019/09/26/mapstruct-zai-springboot-zhong-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="MapStruct是什么"><a href="#MapStruct是什么" class="headerlink" title="MapStruct是什么"></a>MapStruct是什么</h2><blockquote><p>MapStruct is a code generator that greatly simplifies the implementation of mappings between Java bean types based on a convention over configuration approach.</p></blockquote><blockquote><p>MapStruct是一个极大简化javaBean之间互相转换的代码生成器，即简化实体类DTO的互相转化</p></blockquote><p><strong>官方文档</strong>（<a href="https://mapstruct.org/documentation/stable/reference/html/#defining-mapper）" target="_blank" rel="noopener">https://mapstruct.org/documentation/stable/reference/html/#defining-mapper）</a></p><a id="more"></a><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">></span></span>1.3.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-jdk8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font size="3">集成MapStruct官方提供了两种方式，<br>上面配置文件内我们采用的是直接添加Maven依赖，而官方文档还提供了另外一种方式，采用Maven插件形式配置，配置如下所示：</font></p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">></span></span>1.3.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- or newer version --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- depending on your project --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- depending on your project --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- other annotation processors --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一对一转换"><a href="#一对一转换" class="headerlink" title="一对一转换"></a>一对一转换</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getters and setter omitted for brevity</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//DTO</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerDto</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">public</span> String customerName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//(org.mapstruct.Mapper) annotation</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>    CustomerMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> CustomerMapper<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相同属性不需要用@Mapping指定，如Customer和CustomerDto中的id</span>    <span class="token comment" spellcheck="true">//customerName与name不同，则必须指定</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"customerName"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    Customer <span class="token function">toCustomer</span><span class="token punctuation">(</span>CustomerDto customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritInverseConfiguration</span>    CustomerDto <span class="token function">fromCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到CustomerMapper是一个接口的形式存在的，当然也可以是一个抽象类，如果需要在转换的时候才用个性化的定制<br>的时候可以采用抽象类的方式，相应的代码配置官方文档已经声明。@Mapper注解是用于标注接口、抽象类是被MapStruct自动映射的<br>标识，只有存在该注解才会将内部的接口方法自动实现。</p></blockquote><blockquote><p>使用方式1：不需要做过多的配置内容，获取Mapper的方式就是采用Mappers通过动态工厂内部反射机制完成Mapper实现类的获取。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapStructTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>12L<span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"customer001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CustomerDto customerDto <span class="token operator">=</span> CustomerConverter<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">fromCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"customerDto = "</span> <span class="token operator">+</span> customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用方式2：使用springBoot依赖注入</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Specifies the component model to which the generated mapper should adhere. Supported values are</span><span class="token comment" spellcheck="true">//指定mapper的注入模板  :cdi spring jsr330</span><span class="token comment" spellcheck="true">//@mapper添加参数 componentModel = "spring" </span><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token string">"spring"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerConverter</span> <span class="token punctuation">{</span>    CustomerConverter INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>CustomerConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"customerName"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    Customer <span class="token function">toCustomer</span><span class="token punctuation">(</span>CustomerDto customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritInverseConfiguration</span>    CustomerDto <span class="token function">fromCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapStructTest</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用autowired自动注入</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerConverter customerConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Customer customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>12L<span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"customer001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        CustomerDto customerDto = CustomerConverter.INSTANCE.fromCustomer(customer);</span>        CustomerDto customerDto <span class="token operator">=</span> customerConverter<span class="token punctuation">.</span><span class="token function">fromCustomer</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"customerDto = "</span> <span class="token operator">+</span> customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>结果：  customerDto = CustomerDto(id=12, customerName=customer001)</code></pre><h4 id="IDEA插件-MapStruct-Support"><a href="#IDEA插件-MapStruct-Support" class="headerlink" title="IDEA插件: MapStruct Support"></a>IDEA插件: MapStruct Support</h4><blockquote><p>安装idea插件MapStruct Support在编写mapper时可以提示不相同的属性映射</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token string">"spring"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerConverter</span> <span class="token punctuation">{</span>    CustomerConverter INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>CustomerConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"customerName"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插件可以提示source和target参数</span>    Customer <span class="token function">toCustomer</span><span class="token punctuation">(</span>CustomerDto customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritInverseConfiguration</span>    CustomerDto <span class="token function">fromCustomer</span><span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实体类中有List属性的转换"><a href="#实体类中有List属性的转换" class="headerlink" title="实体类中有List属性的转换"></a>实体类中有List属性的转换</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>StudentDto<span class="token operator">></span> studentDtos<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要将teacher转换到teacherDto，按照以前的方式：把teacher中的List遍历，挨个转换成dto再手动添加到teacherDto中的list中</p></blockquote><p>使用mapStruct:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentConverter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义student转studentDto</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span>    StudentDto <span class="token function">studentToDto</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//List&lt;Student> 转 List&lt;StudentDto>，此方法在编译生成后会调用StudentDto studentToDto(Student student);</span>    <span class="token comment" spellcheck="true">//如果不定义StudentDto studentToDto(Student student); 此方法会报错</span>    List<span class="token operator">&lt;</span>StudentDto<span class="token operator">></span> <span class="token function">studentToDtoList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Teacher 转 TeacherDto  ，此方法调用 List&lt;StudentDto> studentToDtoList(List&lt;Student> students);</span>    <span class="token comment" spellcheck="true">// 如果没有List&lt;StudentDto> studentToDtoList(List&lt;Student> students); 此方法报错</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"studentDtos"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"students"</span><span class="token punctuation">)</span>    TeacherDto <span class="token function">teacherToDto</span><span class="token punctuation">(</span>Teacher teacher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    StudentConverter studentConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"sda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"asdfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher<span class="token punctuation">.</span><span class="token function">setStudents</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span> student2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherDto teacherDto <span class="token operator">=</span> studentConverter<span class="token punctuation">.</span><span class="token function">teacherToDto</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teacher = "</span> <span class="token operator">+</span> teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teacherDto = "</span> <span class="token operator">+</span> teacherDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>结果: teacher = Teacher(students=[Student(id=1, name=sda, age=12, sex=男), Student(id=2, name=asdfd, age=23, sex=男)])teacherDto = TeacherDto(studentDtos=[StudentDto(id=1, name=sda, age=12, gender=男), StudentDto(id=2, name=asdfd, age=23, gender=男)])</code></pre><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p><strong>这里以二对一为例:</strong></p><p><em>实体类:</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>对应Dto:</em></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>TeacherDto<span class="token operator">></span> teacherDtos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDto</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>StudentDto<span class="token operator">></span> studentDtos<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mapper类:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentConverter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义student转studentDto</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span>    StudentDto <span class="token function">studentToDto</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//List&lt;Student> 转 List&lt;StudentDto>，此方法在编译生成后会调用StudentDto studentToDto(Student student);</span>    <span class="token comment" spellcheck="true">//如果不定义StudentDto studentToDto(Student student); 此方法会报错</span>    List<span class="token operator">&lt;</span>StudentDto<span class="token operator">></span> <span class="token function">studentToDtoList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Teacher 转 TeacherDto  ，此方法调用 List&lt;StudentDto> studentToDtoList(List&lt;Student> students);</span>    <span class="token comment" spellcheck="true">// 如果没有List&lt;StudentDto> studentToDtoList(List&lt;Student> students); 此方法报错</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"studentDtos"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"students"</span><span class="token punctuation">)</span>    TeacherDto <span class="token function">teacherToDto</span><span class="token punctuation">(</span>Teacher teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//多对一时，每个属性最好写上起对应关系，并且此方法能正确执行依赖  TeacherDto teacherToDto(Teacher teacher);</span>    <span class="token comment" spellcheck="true">//如果teacherToDto方法不存在则会报错</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"teacherDtos"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"teachers"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"school.name"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"school.id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"school.address"</span><span class="token punctuation">)</span>    SchoolDto <span class="token function">schoolToDto</span><span class="token punctuation">(</span>School school<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurkaApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    StudentConverter studentConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"sda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"asdfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher teacher1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher1<span class="token punctuation">.</span><span class="token function">setStudents</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span> student2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher teacher2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher2<span class="token punctuation">.</span><span class="token function">setStudents</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span> student2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teachers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>teacher1<span class="token punctuation">,</span> teacher2<span class="token punctuation">)</span><span class="token punctuation">;</span>        School school <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        school<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>123L<span class="token punctuation">)</span><span class="token punctuation">;</span>        school<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"育碧，苏维埃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        school<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"育碧一中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用mapper转换</span>        SchoolDto schoolDto <span class="token operator">=</span> studentConverter<span class="token punctuation">.</span><span class="token function">schoolToDto</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"school = "</span> <span class="token operator">+</span> school<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"teachers = "</span> <span class="token operator">+</span> teachers<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"schoolDto = "</span> <span class="token operator">+</span> schoolDto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>运行结果：school = School(id=123, address=育碧，苏维埃, name=育碧一中)teachers = [Teacher(students=[Student(id=1, name=sda, age=12, sex=男), Student(id=2, name=asdfd, age=23, sex=男)]), Teacher(students=[Student(id=1, name=sda, age=12, sex=男), Student(id=2, name=asdfd, age=23, sex=男)])]schoolDto = SchoolDto(id=123, address=育碧，苏维埃, name=育碧一中, teacherDtos=[TeacherDto(studentDtos=[StudentDto(id=1, name=sda, age=12, gender=男),StudentDto(id=2, name=asdfd, age=23, gender=男)]),TeacherDto(studentDtos=[StudentDto(id=1, name=sda, age=12, gender=男), StudentDto(id=2, name=asdfd, age=23, gender=男)])])</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署mysql5.7</title>
      <link href="/2019/09/19/docker-bu-shu-mysql5-7/"/>
      <url>/2019/09/19/docker-bu-shu-mysql5-7/</url>
      
        <content type="html"><![CDATA[<h2 id="docker部署mysql与传统方式对比"><a href="#docker部署mysql与传统方式对比" class="headerlink" title="docker部署mysql与传统方式对比"></a>docker部署mysql与传统方式对比</h2><p>1、传统方式：</p><blockquote><p><font size="3">在linux上直接使用yum安装 或者mysql官网下载 tar.gz安装，使用tar.gz可能还要<br>自己手动解决依赖问题，yum安装虽然解决了依赖问题，但是随着日益增多，其他数据安装，以及开发环境，难免会引起于<br>其他开发环境的冲突</font></p></blockquote><p>2、docker容器化部署</p><blockquote><p><font size="3">docker是基于linux容器技术发展而来，而linux容器技术能做到进程<br>隔离，从而使得各个服务的部署独立，互不干扰，使用docker部署mysql，还可以部署在同一台服务器上部署不同版本的<br>mysql，而互不影响，比起传统方式，既不用担心依赖，也不用担心开发环境不同而造成影响</font></p></blockquote><a id="more"></a><h3 id="docker化mysql步骤"><a href="#docker化mysql步骤" class="headerlink" title="docker化mysql步骤"></a>docker化mysql步骤</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><blockquote><p><font size="3">centOS 直接使用yum install docker安装</font></p><p>debian系列：使用 apt-get install docker</p></blockquote><h4 id="拉去dockerhub-mysql官方镜像"><a href="#拉去dockerhub-mysql官方镜像" class="headerlink" title="拉去dockerhub mysql官方镜像"></a>拉去dockerhub mysql官方镜像</h4><blockquote><p>docker pull mysql:5.7</p></blockquote><p><font size="3">下载完成后 ，使用<strong>docker images</strong> 查看当前所有镜像 如下所示：</font></p><pre><code>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               5.7                 383867b75fd2        7 days ago          373MBmongo               latest              cdc6740b66a7        5 weeks ago         361MB</code></pre><p><font size="3">可以看到 TAG 下面标着 5.7， 即mysql的5.7版本</font></p><h4 id="运行mysql5-7镜像"><a href="#运行mysql5-7镜像" class="headerlink" title="运行mysql5.7镜像"></a>运行mysql5.7镜像</h4><blockquote><p>docker run -v ${pwd}/mysql:/var/lib/mysql –name mysql5.7 -d -e MYSQL_ROOT_PASSWORD=root<br>-p 3306:3306 mysql:5.7</p></blockquote><blockquote><p><font size="3">参数解析：</font></p><p>-v ${pwd}/mysql:/var/lib/mysql 把容器里的/var/lib/mysql目录挂载到实体机的当前<br>执行此docker命令的目录下mysql上，这样容器里的数据库文件就映射到了实体机，即使容器挂掉，mysql<br>的数据还在</p><p>-p 3306：3306 把主机的3306 端口映射到容器的3306端口，使得可以再容器外访问mysql</p><p>-d 使容器在后太运行</p><p>-e 指定mysql容器的运行环境参数， MYSQL_ROOT_PASSWORD 可以设定mysql的root账户的密码</p></blockquote><h4 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h4><blockquote><p>docker ps</p></blockquote><pre><code>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMESee000f76f8fd        mongo:latest        &quot;docker-entrypoint.s…&quot;   2 days ago          Up About an hour    0.0.0.0:27017-&gt;27017/tcp            mongoDBb32313af6fd9        mysql:5.7           &quot;docker-entrypoint.s…&quot;   3 days ago          Up About an hour    0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql5.7</code></pre><p><font size="3">此时，可以看到status显示 运行时间，我的已经运行了一小时，如果失败，status<br>会显示为 Exited ，说明容器运行失败，原因基本上是 docker run 命令参数不全或者错误导致的,这时，可以使用数据库连接工具<br>进行连接，也可以进入容器执行sql查看结果，本文以进入容器为例：<br></font></p><pre><code>执行：docker exec -it ${CONTAINER ID} bash这里填写自己的mysql容器id,-it表示以交互模式进入容器，容器内部就像是一个精简的linux，可以执行linux基本命令root@cyka:/docker-all-conf/mysql5.7/conf.d# docker exec -it mysql5.7 bashroot@b32313af6fd9:/# 可以看到进入容器后@后已经变成容器id，相当于linux的host这是可以运行 mysql -uroot -p输入 密码后进入mysql执行sqlroot@b32313af6fd9:/# mysql -uroot -p Enter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.27 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || forum-server       || mysql              || performance_schema || sys                |+--------------------+5 rows in set (0.01 sec)mysql&gt; </code></pre><p><strong>docker部署mysql5.7完成！如果想配置mysql的配置文件，可以把mysql的配置文件目录挂载，这样就可以自己配置了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成graphql文件上传</title>
      <link href="/2019/09/13/springboot-ji-cheng-graphql-wen-jian-shang-chuan/"/>
      <url>/2019/09/13/springboot-ji-cheng-graphql-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot集成graphql文件上传"><a href="#SpringBoot集成graphql文件上传" class="headerlink" title="SpringBoot集成graphql文件上传"></a>SpringBoot集成graphql文件上传</h2><h3 id="graphql上传文件所面临的问题"><a href="#graphql上传文件所面临的问题" class="headerlink" title="graphql上传文件所面临的问题"></a>graphql上传文件所面临的问题</h3><blockquote><p>在国内，目前使用graphql的公司并不多，facebook设计graphql主要支持是js，对于java的支持主要<br>靠的还是社区，目前使用最多的是<a href="https://github.com/graphql-java-kickstart/graphql-spring-boot" target="_blank" rel="noopener">graphql-spring-boot</a><br>与SpringBoot的整合，以及schema解析工具<a href="https://github.com/graphql-java-kickstart/graphql-java-tools" target="_blank" rel="noopener">graphql-java-tools</a><br>，maven依赖如下，但其对Graphql实现的servlet对文件上传的支持却迟迟没有的demo</p></blockquote><a id="more"></a><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java-kickstart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java-kickstart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-java-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java-kickstart<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphiql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><font size="3">于是本人就上stackoverflow求助各路大神，但是由于graphql文件上传过于冷门，没人回答<br>最终还是得靠自己解决，附上原文链接，有兴趣得朋友可以看看<a href="https://stackoverflow.com/questions/57372259/how-to-upload-files-with-graphql-java" target="_blank" rel="noopener">How to upload files with graphql-java?</a></font></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> graphql-java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自定义自动配置</title>
      <link href="/2019/09/08/springboot-zi-ding-yi-zi-dong-pei-zhi/"/>
      <url>/2019/09/08/springboot-zi-ding-yi-zi-dong-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="为什么需要自定义spring自动配置"><a href="#为什么需要自定义spring自动配置" class="headerlink" title="为什么需要自定义spring自动配置?"></a>为什么需要自定义spring自动配置?</h4><blockquote><p>在很多时候，我们会需要开发一些公共组件jar包，同时我们又希望能在项目启动时自动<br>加载，所以可以通过自定义自动配置包来到达此目的。</p></blockquote><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p><font size="3">如果不懂springboot自动配置原理，可以看我之前一篇<a href="https://ubisoft-potato.github.io/2019/09/07/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/#more">springboot自动配置原理</a></font></p><h3 id="maven引入springboot核心依赖"><a href="#maven引入springboot核心依赖" class="headerlink" title="maven引入springboot核心依赖"></a>maven引入springboot核心依赖</h3><p><font size="3">版本依赖父工程的springboot版本号，可自行决定</font></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>your-version<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开发需要自动注入的组件"><a href="#开发需要自动注入的组件" class="headerlink" title="开发需要自动注入的组件"></a>开发需要自动注入的组件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>pooled<span class="token punctuation">.</span>PooledDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>PooledDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">MyDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//比如自己注入一个apache的数据源</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font size="3">上述代码首先在类上添加了@configuration注解，说明这是一个配置类，此时这个类就相当于<br>ssm项目中的applicationContext.xml， @Bean 标注的方法则相当于applicationContext.xml中如下配置:</font></p><p><font size="3"><strong>说明：</strong>@ConditionalOnClass(PooledDataSource.class)，意为当PooledDataSource<br>类存在时才注入这个bean，可以实现注入bean控制</font></p><pre class="line-numbers language-xml">&lt;bean id=&quot;MyDataSource&quot; class=&quot;org.apache.ibatis.datasource.pooled.PooledDataSource&quot;/&gt;</code></pre><p><font size="3">但是这个项目如果直接作为jar包导入你的主项目里，还不能实现自动注入，我们还需要在<br>resource下建立 META-INF/spring.factories ， 如自动配置文中所述位置, 需要注意的是 文件夹必须叫<br>META-INF，文件名也必须是spring.factories，否则无法实现自动注入， 最后 spring.factories 添加如下内容</font></p><p><code>文件位置如下：</code></p><p><a href="https://imgchr.com/i/n8H4Mt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/08/n8H4Mt.png" alt="n8H4Mt.png"><code class="language-xml">&lt;bean id=&quot;MyDataSource&quot; class=&quot;org.apache.ibatis.datasource.pooled.PooledDataSource&quot;/&gt;</code></pre><p><font size="3">但是这个项目如果直接作为jar包导入你的主项目里，还不能实现自动注入，我们还需要在<br>resource下建立 META-INF/spring.factories ， 如自动配置文中所述位置, 需要注意的是 文件夹必须叫<br>META-INF，文件名也必须是spring.factories，否则无法实现自动注入， 最后 spring.factories 添加如下内容</font></p><p><code>文件位置如下：</code></p><p><a href="https://imgchr.com/i/n8H4Mt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/08/n8H4Mt.png" alt="n8H4Mt.png"></a></p><pre><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.xxx.xxx.xxx.AutoConfigDemo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font size="3">com.xxx.xxx.xxx.AutoConfigDemo 是我们的配置类全类名 <font></font></font></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><font size="3">将项目打成jar包，在主项目中引入，启动主项目，实现自动注入<font></font></font></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动配置原理</title>
      <link href="/2019/09/07/springboot-zi-dong-pei-zhi-yuan-li/"/>
      <url>/2019/09/07/springboot-zi-dong-pei-zhi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><h3 id="关键注解-SpringBootApplication"><a href="#关键注解-SpringBootApplication" class="headerlink" title="关键注解@SpringBootApplication"></a>关键注解@SpringBootApplication</h3><p>点击进入@SpringBootApplication注解代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>                classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p><font size="3">其中包含@EnableAutoConfiguration注解:意为开启自动配置（顺便一提:@ComponentScan注解<br>这个注解会扫描和加了这个注解的类在同一包和子包下的所有组件即:Controller、service等,为我们省去了写xml配置文件的过程）,再点击进入@EnableAutoConfiguration注解</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>    String ENABLED_OVERRIDE_PROPERTY <span class="token operator">=</span> <span class="token string">"spring.boot.enableautoconfiguration"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exclude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font size="3">这个注解有2个方法: exclude 和 excludeName，在@SpringBootApplication中可以通过使用这两个方法来指明我们不想自动注入的类</font></p><p><strong>比如：我们不想让springBoot自动配置数据源（springBoot默认HikariCP连接池），这样可以自己注入数据源，达到切换连接池的目的</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForumServiceApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ForumServiceApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font size="3">@Import(AutoConfigurationImportSelector.class),@import注解表示引入指定类型的bean，即AutoConfigurationImportSelector，springBoot为我们自动注入的<br>bean全部通过它来读取,点击进入AutoConfigurationImportSelector源码</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span>        <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> BeanClassLoaderAware<span class="token punctuation">,</span> ResourceLoaderAware<span class="token punctuation">,</span>        BeanFactoryAware<span class="token punctuation">,</span> EnvironmentAware<span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader                <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>                autoConfigurationMetadata<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> AutoConfigurationEntry <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>            AutoConfigurationMetadata autoConfigurationMetadata<span class="token punctuation">,</span>            AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span>                attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>            AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>                <span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span>                <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you "</span>                        <span class="token operator">+</span> <span class="token string">"are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> configurations<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</strong></p><p><font size="3">AutoConfigurationImportSelector通过getAutoConfigurationEntry这个方法获取到需要自动注入的类，getAutoConfigurationEntry又调用了<br>getCandidateConfigurations(annotationMetadata,attributes),getCandidateConfigurations调用SpringFactoriesLoader类的静态方法，进入<br>SpringFactoriesLoader中，这个类是spring-core包中的</font></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringFactoriesLoader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The location to look for factories.     * &lt;p>Can be present in multiple JAR files.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FACTORIES_RESOURCE_LOCATION <span class="token operator">=</span> <span class="token string">"META-INF/spring.factories"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动配置核心文件"><a href="#自动配置核心文件" class="headerlink" title="自动配置核心文件"></a>自动配置核心文件</h3><p><font size="3">通过源码注释可以看到 FACTORIES_RESOURCE_LOCATION，并且位置为META-INF/spring.factories, spring.factories是本文重点</font></p><p><img src="https://s2.ax1x.com/2019/09/07/n1MD3j.jpg" alt="n1MD3j.jpg"></p><pre><code>部分spring.factories内容：# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</code></pre><p><font size="3">org.springframework.boot.autoconfigure.EnableAutoConfiguration=<br>下面所有的自动配置类将被springBoot自动注入，通过spring.factories我们可以自定义自动配置类，实现springboot容器启动时自动注入的效果</font></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
